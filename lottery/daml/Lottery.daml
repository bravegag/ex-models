-- Copyright (c) 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
-- SPDX-License-Identifier: Apache-2.0

daml 1.2
module Lottery where

import Iou

template Draw
  with
    organizer : Party
    name : Text
    description : Text
    players : [Party]
    ious : [ContractId Iou]
    cashPrize : Decimal
    deadline : Time
  where
    signatory organizer
    observer players

    controller organizer can
      Invite : ContractId PlayerInvite
        with player : Party
        do
          create PlayerInvite with draw = this; player
      Run : [ContractId Iou]
        do
          now <- getTime
          assertMsg "Can only run the lottery after deadline" $ now >= deadline
          unlockedIous <- mapA (\i -> exercise i Unlock) ious
          mapA (\i -> exercise i Transfer with newOwner = organizer) unlockedIous

    choice BuyTicket : ContractId Draw
      with
        player : Party
        iouId : ContractId Iou
      controller player
      do
        now <- getTime
        assertMsg "Tickets can only be bought before the deadline" $ now < deadline
        assert $ elem player players
        iou <- fetch iouId
        assert $ iou.amount > 0.0
        lockedIou <- exercise iouId Lock with newLocker = organizer
        create this with ious = lockedIou :: ious; cashPrize = cashPrize + iou.amount

template PlayerInvite
  with
    draw : Draw
    player : Party
  where
    signatory draw.organizer, draw.players
    controller player can
      Accept : ContractId Draw
        do
          create draw with players = player :: draw.players
